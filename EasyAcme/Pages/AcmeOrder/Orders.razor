@page "/orders"
@using EasyAcme.Model.ViewModels
@using EasyAcme.Logic

@inject IMessageService _messageService;
@inject IAcmeOrderService _acmeOrderService;

<PageTitle>Orders</PageTitle>

<h1 class="text-center">ACME Orders</h1>
<AddOrderModal @bind-ShowModal="_showModal" OnSaveChangesAsync="OnSaveChangesAsync" />

@if (_acmeOrders == null)
{
    <SpinKit Type="SpinKitType.Wave" Centered />
}
else
{
    <div class="d-flex flex-row-reverse">
        <Button Class="mb-3 me-3" Color="Color.Primary" Clicked="@OnAddNewOrder">
            New Order
        </Button>
    </div>
    
    <Table TextAlignment="TextAlignment.Center" VerticalAlignment="VerticalAlignment.Middle" Hoverable>
        <TableHeader ThemeContrast="ThemeContrast.Light">
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Common Name</TableHeaderCell>
                <TableHeaderCell>Status</TableHeaderCell>
                <TableHeaderCell>Certificate From</TableHeaderCell>
                <TableHeaderCell>Certificate To</TableHeaderCell>
                <TableHeaderCell />
            </TableRow>
        </TableHeader>
        <TableBody>
            @for (var i = 0; i < _acmeOrders.Count; i++)
            {
                var index = i;
                var order = _acmeOrders[index];
                <TableRow @key="@order.Id">
                    <TableRowHeader>@(index + 1)</TableRowHeader>
                    <TableRowCell>@order.CommonName</TableRowCell>
                    <TableRowCell>@order.Status</TableRowCell>
                    <TableRowCell>@order.CertificateFrom</TableRowCell>
                    <TableRowCell>@order.CertificateTo</TableRowCell>
                    <TableRowCell>
                        <Button Color="Color.Danger" Clicked="@(async () => await ShowDeleteConfirmMessageAsync(order.Id))">Delete</Button>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
}

@code {
    private List<AcmeOrderViewModel>? _acmeOrders;
    private bool _showModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private void OnAddNewOrder()
    {
        _showModal = true;
    }

    private async Task ShowDeleteConfirmMessageAsync(int orderId)
    {
        if (await _messageService.Confirm("Are you sure you want to delete the order?", "Confirmation"))
        {
            await _acmeOrderService.DeleteAcmeOrderAsync(orderId);
            await LoadOrdersAsync();
        }
    }

    private async Task OnSaveChangesAsync(CreateAcmeOrderModel order)
    {
        await _acmeOrderService.CreateAcmeOrderAsync(order);
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        _acmeOrders = await _acmeOrderService.GetAcmeOrdersAsync();
    }
}