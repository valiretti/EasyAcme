@page "/accounts"

@using EasyAcme.Logic
@using EasyAcme.Model.ViewModels
@inject IAcmeAccountService _acmeAccountService;
@inject IMessageService _messageService;

<PageTitle>Accounts</PageTitle>

<h1 class="text-center">ACME Accounts</h1>
<AddAccountModal @bind-ShowModal="_showModal" OnSaveChangesAsync="OnSaveChangesAsync" GetTermsOfUseAsync="GetTermsOfUseAsync" />
@if (_acmeAccounts == null)
{
    <SpinKit Type="SpinKitType.Wave" Centered />
}
else
{
    <div class="d-flex flex-row-reverse">
        <Button Class="mb-3 me-3" Color="Color.Primary" Clicked="@OnAddNewAccount">
            New Account
        </Button>
    </div>
    
    <Table TextAlignment="TextAlignment.Center" VerticalAlignment="VerticalAlignment.Middle" Hoverable>
        <TableHeader ThemeContrast="ThemeContrast.Light">
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Display name</TableHeaderCell>
                <TableHeaderCell>ACME server identifier</TableHeaderCell>
                <TableHeaderCell>Associated email(s)</TableHeaderCell>
                <TableHeaderCell />
            </TableRow>
        </TableHeader>
        <TableBody>
            @for (var i = 0; i < _acmeAccounts.Count; i++)
            {
                var index = i;
                var account = _acmeAccounts[index];
                <TableRow @key="@account.Id">
                    <TableRowHeader>@(index + 1)</TableRowHeader>
                    <TableRowCell>@account.DisplayName</TableRowCell>
                    <TableRowCell>@account.ServerIdentifier</TableRowCell>
                    <TableRowCell>@account.AccountEmails</TableRowCell>
                    <TableRowCell>
                        <Button Color="Color.Danger" Clicked="@(async () => await ShowDeleteConfirmMessageAsync(account.Id))">Delete</Button>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
}

@code {
    private List<AcmeAccountViewModel>? _acmeAccounts;
    private bool _showModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
    }

    private void OnAddNewAccount()
    {
        _showModal = true;
    }

    private async Task ShowDeleteConfirmMessageAsync(int accountId)
    {
        if ( await _messageService.Confirm("Are you sure you want to deactivate and delete ACME account?", "Confirmation" ) )
        {
            if (!await _acmeAccountService.DeactivateAndDeleteAcmeAccountAsync(accountId))
            {
                await _messageService.Error("An error has occurred during deactivating the ACME account.");
            }
            else
            {
                await LoadAccountsAsync();
            }
        }
    }

    private async Task OnSaveChangesAsync(CreateAcmeAccountModel a)
    {
        if (!await _acmeAccountService.CreateAcmeAccountsAsync(a))
        {
            await _messageService.Error("An error has occurred during creation the ACME account.");
        }
        else
        {
            await LoadAccountsAsync();
        }
    }

    private Task<Uri?> GetTermsOfUseAsync(string directoryUrl)
    {
        return _acmeAccountService.GetTermsOfServiceAsync(directoryUrl);
    }

    private async Task LoadAccountsAsync()
    {
        _acmeAccounts = await _acmeAccountService.GetAcmeAccountsAsync();
    }
}